name: CI Pipeline

on:
  push:
    branches:
      - main
      - backend
      - frontend
  pull_request:
    branches:
      - main
      - backend
      - frontend

jobs:
  ci-pipeline:
    runs-on: macos-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install Docker on macOS
      - name: Install Docker
        run: |
          brew install --cask docker
          sudo /Applications/Docker.app/Contents/MacOS/Docker & # Run Docker in the background
          sleep 30 # Allow Docker to initialize

      # Step 3: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 4: Build Docker containers
      - name: Build Docker Containers
        run: docker compose build

      # Step 5: Start Docker Compose (backend and DB services)
      - name: Start Docker Compose
        run: docker compose up -d

      # Step 6: Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL to be ready
        run: |
          while ! docker exec -t postgres pg_isready -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done

      # Step 7: Run backend migrations
      - name: Run Backend Migrations
        run: docker compose exec web python manage.py migrate

      # Step 8: Install frontend dependencies
      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install

      # Step 9: Run Jest tests for frontend
      - name: Run Jest Tests for Frontend
        run: |
          cd frontend
          npm test -- --coverage

      # Step 10: Run Backend Tests
      - name: Run Backend Tests
        run: docker compose exec web pytest

      # Step 11: Install Expo CLI (Ensure Expo is installed globally)
      - name: Install Expo CLI
        run: |
          npm install -g expo-cli

      # Step 12: Start Expo app (iOS emulator)
      - name: Start Expo app (iOS)
        run: |
          cd frontend
          npm run ios &  # Start Expo in the background

      # Step 13: Wait for the iOS emulator to boot
      - name: Wait for iOS emulator to be ready
        run: |
          while ! xcrun simctl list devices | grep "(Booted)"; do
            echo "Waiting for iOS emulator to boot..."
            sleep 5
          done

      # Step 14: Install Maestro
      - name: Install Maestro
        run: |
          curl -fsSL "https://get.maestro.mobile.dev" | bash

      # Step 15: Run Maestro tests
      - name: Run Maestro tests
        run: |
          cd frontend
          export PATH="$PATH":"$HOME/.maestro/bin"
          export MAESTRO_DRIVER_STARTUP_TIMEOUT=60000
          maestro test maestro/acceptance/*.yaml
